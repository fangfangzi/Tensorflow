import numpy as np
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets('MNIST_data',one_hot=True)

def add_layer(x,x_rows,the_number_of_neuron,activation_function = None,keep_pro = 1):
    global Weight
    global biases
    Weight = tf.Variable(tf.random_normal([x_rows,the_number_of_neuron]),name='Weights',dtype=tf.float32)
    biases = tf.Variable(tf.zeros([1,the_number_of_neuron])+0.1,name='biases',dtype=tf.float32)
    Wx_plus_b = tf.add(tf.matmul(x,Weight),biases)
    Wx_plus_b = tf.nn.dropout(Wx_plus_b,keep_pro)
    if activation_function == None:
        outcome = Wx_plus_b
    else:
        outcome = activation_function(Wx_plus_b)
    return outcome

xs = tf.placeholder(tf.float32,[None,784])
ys = tf.placeholder(tf.float32,[None,10])

l1 = add_layer(xs,784,666,activation_function=tf.nn.softmax,keep_pro=0.5)
prediction = add_layer(l1,666,10,activation_function=tf.nn.softmax)

def compute_accuracy(v_xs,v_ys):
    global prediction
    y_pre = sess.run(prediction,feed_dict = {xs:v_xs})
    correct_prediction = tf.equal(tf.argmax(y_pre,1),tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    result = sess.run(accuracy,feed_dict = {xs:v_xs,ys:v_ys})
    return result
    
cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),
                                              reduction_indices=[1]))
                                              
init = tf.global_variables_initializer()
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

with tf.Session() as sess:
    sess.run(init)
    for i in range(10000):
        batch_xs,batch_ys = mnist.train.next_batch(100)
        sess.run(train_step,feed_dict = {xs:batch_xs,ys:batch_ys})
        if i%1000 == 0:
            print('acc = ',compute_accuracy(mnist.train.images,mnist.train.labels))
    print('acc = ',compute_accuracy(mnist.test.images,mnist.test.labels))
    
