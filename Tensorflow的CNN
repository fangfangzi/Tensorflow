import tensorflow as tf
import numpy as  np
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets('MNIST_data',one_hot=True)

xs = tf.placeholder(tf.float32,[None,784]) #28*28像素
ys = tf.placeholder(tf.float32,[None,10])
x_image = tf.reshape(xs,[-1,28,28,1])

def compute_accuracy(v_xs,v_ys):
    global prediction
    y_pre = sess.run(prediction,feed_dict = {xs:v_xs})
    correct_prediction = tf.equal(tf.argmax(y_pre,1),tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    result = sess.run(accuracy,feed_dict = {xs:v_xs,ys:v_ys})
    return result
    
def Weight_variable(shape):
    initial = tf.truncated_normal(shape,stddev=0.1)
    return tf.Variable(initial)
    
def bias_variable(shape):
    initial = tf.constant(0.1,shape=shape)
    return tf.Variable(initial)
    
def conv2d(x,W):  #卷积神经网络层，x为输入的图片值，W为权重
    return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding='SAME')  #stride[1,x_movement,y_movement,1]

def pooling(x):
    return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding='SAME')

def add_layer(input_x,W_shape,b_shape,activation_function = None,keep_pro = 1):
    Weight = Weight_variable(W_shape)
    bias = bias_variable(b_shape)
    h_conv = conv2d(input_x,Weight) + bias
    h_conv = tf.nn.dropout(h_conv,keep_prob=keep_pro)
    if activation_function == None:
        outcome = h_conv
    else:
        outcome = activation_function(h_conv)
    out = pooling(outcome)
    return out
    
h_pool1 = add_layer(x_image,[5,5,1,32],[32],activation_function=tf.nn.relu,keep_pro=0.5)
h_pool2 = add_layer(h_pool1,[5,5,32,64],[64],activation_function=tf.nn.relu)

def connection_function(input_x,W_shape,b_shape,activation_function = None,keep_pro = 1):
    Weight = Weight_variable(W_shape)
    bias = bias_variable(b_shape)
    input_x_flat = tf.reshape(input_x,[-1,W_shape[0]])
    h_fc = tf.matmul(input_x_flat,Weight) + bias
    h_fc = tf.nn.dropout(h_fc,keep_prob=keep_pro)
    if activation_function == None:
        outcome = h_fc
    else:
        outcome = activation_function(h_fc)
    return outcome
    
fc1 = connection_function(h_pool2,[7*7*64,1024],[1024],activation_function=tf.nn.relu,keep_pro=0.5)
prediction = connection_function(fc1,[1024,10],[10],activation_function=tf.nn.softmax)

cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),
                                              reduction_indices=[1]))
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(2000):
        batch_xs,batch_ys = mnist.train.next_batch(100)
        sess.run(train_step,feed_dict = {xs:batch_xs,ys:batch_ys})
        if i%100 == 0:
            print('acc = ',compute_accuracy(mnist.test.images,mnist.test.labels))
            
#W_conv1 = Weight_variable([5,5,1,32])  #5*5的一小块，1代表黑白图，32的高度
#b_conv1 = bias_variable([32])
#h_conv1 = tf.nn.relu(conv2d(x_image,W_conv1) + b_conv1)
#h_pool1 = pooling(h_conv1)  #14*14*32
#W_conv2 = Weight_variable([5,5,32,64])  #5*5的一小块，1代表黑白图，32的高度
#b_conv2 = bias_variable([64])
#h_conv2 = tf.nn.relu(conv2d(h_pool1,W_conv2) + b_conv2)
#h_pool2 = pooling(h_conv2)  #7*7*64
